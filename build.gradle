buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.0.2.RELEASE")
    }
}

group = 'com.sequenceiq'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'spring-boot'
apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'jacoco'

sourceCompatibility = 1.7
targetCompatibility = 1.7

def env = project.hasProperty('env') ? project.getProperty('env') : 'local'
logger.quiet "Loading configuration for environment '$env'"

repositories {
    mavenCentral()
}

jar { baseName = 'periscope' }

configurations {
    deployerJars
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: "s3://seq-repo/releases") {
                authentication(userName: "$System.env.aws_access_key_id", passphrase: "$System.env.aws_secret_access_key")
            }
            snapshotRepository(url: "s3://seq-repo/snapshots") {
                authentication(userName: "$System.env.aws_access_key_id", passphrase: "$System.env.aws_secret_access_key")
            }
        }
    }
}

repositories {
    mavenCentral()
    maven { url "http://maven.sequenceiq.com/snapshots" }
    maven { url "http://maven.sequenceiq.com/releases" }
    maven { url "http://seq-repo.s3-website-eu-west-1.amazonaws.com/public" }
    maven { url "http://seq-repo.s3-website-eu-west-1.amazonaws.com/releases" }
    maven { url "http://seq-repo.s3-website-eu-west-1.amazonaws.com/snapshots" }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web:1.0.2.RELEASE")
    compile("org.springframework.boot:spring-boot-starter-security:1.0.2.RELEASE")
    compile("org.springframework.boot:spring-boot-starter-data-jpa:1.0.2.RELEASE")
    compile("org.springframework:spring-context-support:4.0.3.RELEASE")
    compile("org.apache.commons:commons-lang3:3.3.2")
    compile("org.hsqldb:hsqldb:2.3.2")
    compile("org.apache.hadoop:hadoop-yarn-client:${hadoopVersion}")
    compile("org.apache.hadoop:hadoop-yarn-server-resourcemanager:${hadoopVersion}")
    compile("org.apache.hadoop:hadoop-common:${hadoopVersion}")
    compile("com.sequenceiq:ambari-client16:1.6.1")
    compile("javax.servlet:javax.servlet-api:3.0.1")
    compile("com.sequenceiq:cloudbreak-rest-client:0.2.7")
    compile("org.freemarker:freemarker:2.3.20")
    compile("javax.mail:mail:1.4.7")
    compile("org.apache.httpcomponents:httpclient:4.3.5")
    testCompile("junit:junit:4.11")
    testCompile("org.mockito:mockito-all:1.9.5")
    testCompile("org.springframework:spring-test:4.0.2.RELEASE")
}

springBoot { mainClass = "com.sequenceiq.periscope.PeriscopeApplication" }

checkstyleMain {
    ignoreFailures = false
    configProperties = ['config_loc': "$projectDir/config/checkstyle"]
}

checkstyleTest {
    ignoreFailures = false
    configProperties = ['config_loc': "$projectDir/config/checkstyle"]
}

task wrapper(type: Wrapper) { gradleVersion = "2.0" }

test {
    include 'com/sequenceiq/**'
    testLogging.showStandardStreams = true
    ignoreFailures = false
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}

jacoco {
    toolVersion = "0.6.2.201302030002"
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}